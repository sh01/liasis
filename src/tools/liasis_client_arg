#!/usr/bin/env python
#Copyright 2007,2008,2009 Sebastian Hagen
# This file is part of liasis.
#
# liasis is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# liasis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import binascii
import sys
import socket
import optparse
import time
import logging

from gonium.fdm import ED_get

from liasis.cc_client import BTControlConnectionClientGonium, ThroughputCounter


def bandwidth_avg(data):
   data = [d for d in data if not (d is None)]
   if (len(data) == 0):
      return None
   return 1.0*sum(data) / len(data)


class btccs(BTControlConnectionClientGonium):
   conn_fmtstr = '{0:15} {1:5} {2:10} {3:10} {4:10}  {5} {6}  {7} {8}  {9}  {10:5}  {11:5} {12:5}, {13}'
   def __init__(self, ed, *args, terminate_after_sync, td_print_delay=None, **kwargs):
      BTControlConnectionClientGonium.__init__(self, ed, *args, **kwargs)
      self.ed = ed
      self.tas = terminate_after_sync
      self.em_utd_change_true.new_listener(self.utd_change_true_process)
      self.td_print_delay = td_print_delay
      self.tbel = None
      
      if (not (td_print_delay is None)):
         self.td_print_timer = ed.set_timer(self.td_print_delay, self.td_print, persist=True)
      else:
         self.td_print_timer = None
      
   def input_process_COMMANDNOOP(self, cmd, args):
      """Process COMMANDNOOP message"""
      BTControlConnectionClientGonium.input_process_COMMANDNOOP(self, cmd, args)
      if ((self.td_print_timer is None) and (self.messages_pending == [])):
         print('Command was a NOOP.')
         self.ed.shutdown()

   def input_process_COMMANDOK(self, cmd, args):
      """Process COMMANDOK message"""
      BTControlConnectionClientGonium.input_process_COMMANDOK(self, cmd, args)
      if ((self.td_print_timer is None) and (self.messages_pending == [])):
         print('Sucessfully executed command.')
         self.ed.shutdown()

   def input_process_COMMANDFAIL(self, cmd, args):
      """Process COMMANDFAIL"""
      if ((self.td_print_timer is None) and (self.messages_pending == [])):
         print('Command failed: {0!a}.'.format(args[1]))
         self.ed.shutdown()

   def input_process_PROTOERROR(self, cmd, args):
      """Process protocol error message"""
      self.ed.shutdown()
      BTControlConnectionClientGonium.input_process_PROTOERROR(self, cmd, args)

   @staticmethod
   def dts_fmt(dts = None):
      if (dts is None):
         dts = time.localtime(time.time())
      return time.strftime('%Y-%m-%d %H:%M:%S', dts)
   
   @classmethod
   def conn_header_print(cls):
      print(cls.conn_fmtstr.format('ip','port','peer id', 'bytes out', 'bytes in', 's_interest', 's_choked', 'p_interest', 'p_choked', 'mse_cm', 'pieces_completed', 'block req count', 'start', 'peer id start'))
      
   def throughput_block_process_out(self, client_idx, info_hash, *args, **kwargs):
      if (b'GETBTHTHROUGHPUT' in [e[0] for e in self.messages_pending]):
         # We haven't received data for all of the infohashes yet
         return
      
      if not (self.tbel is None):
         self.tbel.close()
         self.tbel = None
      self.td_print()
      
   def td_print(self):
      if (not self.up_to_date):
         return

      for btc in self.bt_clients:
         for bth in btc.torrents.values():
            if not (bth.active):
               continue
            print('{0}: Bandwidth usage for {1!a}:'.format(self.dts_fmt(), bth.target_basename_get()))
            avg_in_10 = (bandwidth_avg(bth.bandwidth_logger_in[-10:]) or 0)/1024
            avg_in_100 = (bandwidth_avg(bth.bandwidth_logger_in[-100:]) or 0)/1024
            avg_in_1000 = (bandwidth_avg(bth.bandwidth_logger_in[-1000:]) or 0)/1024
         
            avg_out_10 = (bandwidth_avg(bth.bandwidth_logger_out[-10:]) or 0)/1024
            avg_out_100 = (bandwidth_avg(bth.bandwidth_logger_out[-100:]) or 0)/1024
            avg_out_1000 = (bandwidth_avg(bth.bandwidth_logger_out[-1000:]) or 0)/1024
      
            print('\tout(summary): {0:.2f} kb/s (10) {1:.2f} kb/s (100) {2:.2f} kb/s (1000)'.format(avg_out_10, avg_out_100, avg_out_1000))
            print('\tin(summary): {0:.2f} kb/s (10) {1:.2f} kb/s (100) {2:.2f} kb/s (1000)'.format(avg_in_10, avg_in_100, avg_in_1000))

         print('')
      
   def throughput_data_request(self):
      for client_idx in range(len(self.bt_clients)):
         for info_hash in self.bt_clients[client_idx].torrents.keys():
            if (self.bt_clients[client_idx].torrents[info_hash].active):
               self.msg_send(b'GETBTHTHROUGHPUT', [client_idx, info_hash, 1000])
      
   @classmethod
   def conn_print(cls, conn):
      # message stream encryption
      if (not conn.mse_init_done):
         mse_cm_out = 0
      else:
         mse_cm_out = conn.mse_cm
      # pieces have count
      if not (conn.piecemask is None):
         phc = conn.piecemask.bits_set_count()
      else:
         phc = '-'
      
      if (conn.peer_id is None):
         client_id = None
      else:
         client_id = ascii(conn.peer_id[:8])
      
      print(cls.conn_fmtstr.format(
            conn.btpeer.ip,
            conn.btpeer.port,
            conn.btpeer.peer_id,
            conn.content_bytes_out, 
            conn.content_bytes_in,
            int(conn.s_interest),
            int(conn.s_choked),
            int(conn.p_interest),
            int(conn.p_choked),
            mse_cm_out,
            phc,
            conn.peer_req_count,
            time.strftime('%H:%M', time.localtime(conn.ts_start)),
            client_id
            )
         )
   
   def utd_change_true_process(self):
      for client in self.bt_clients:
         print('---------- BT Client: {0}'.format(client))
         print('----- uk connections ({0}):'.format(len(client.connections_uk)))
         self.conn_header_print()
         for conn in client.connections_uk:
            self.conn_print(conn)
               
         for bth in client.torrents.values():
            print('----- BT Handler: Basename: {0!a} IH: {1} active: {2}'.format(bth.target_basename_get(), binascii.b2a_hex(bth.metainfo.info_hash), bth.active))
            print('peer id: {0!a} pending blocks: {1}'.format(bth.peer_id, bth.blockmask_req.bits_set_count()))
            print('total transfers: down: {0:.2f}Mb up: {1:.2f}Mb'.format(bth.content_bytes_in/1024.0**2, bth.content_bytes_out/1024.0**2))
            print('download progress: {0} / {1} pieces ({2:.4f} %)'.format(bth.pieces_have_count, bth.piece_count, (100.0*bth.pieces_have_count)/bth.piece_count))
            print('-- connections ({0}):'.format(len(bth.peer_connections)))
            self.conn_header_print()
            for conn in bth.peer_connections:
               self.conn_print(conn)
         
      if (self.tas):
         self.ed.shutdown()


class tcbtccs(btccs, ThroughputCounter):
   def __init__(self, *args, **kwargs):
      btccs.__init__(self, *args, **kwargs)
      ThroughputCounter.__init__(self)
      self.tbel = self.em_throughput_block.new_listener(self.throughput_block_process_out)


if (__name__ == '__main__'):
   # logging init
   logger = logging.getLogger()
   log = logger.log
   logger.setLevel(0)
   formatter = logging.Formatter('%(asctime)s %(name)s %(levelname)s %(message)s')
   handler_stderr = logging.StreamHandler()
   handler_stderr.setLevel(30)
   handler_stderr.setFormatter(formatter)
   logger.addHandler(handler_stderr)
   
   event_dispatcher = ED_get()()
   
   # option parsing
   op = optparse.OptionParser()
   op.add_option('-c', '--ci', dest="client_idx", default=0, type="int", metavar='ID', help="Index of client to send status-changing cmds to")
   op.add_option('--start', dest="bth_start", default=None, metavar='INFOHASH', help="Base16-encoded info-hash of BTH to start")
   op.add_option('--stop', dest="bth_stop", default=None, metavar='INFOHASH', help="Base16-encoded info-hash of BTH to stop")
   op.add_option('--forcebtcreannounce', dest='fbr', action='store_true', default=False, help="Force all BTHs of specified BTC to reannounce to their respective tracker")
   op.add_option('--add-torrent', dest='mi_new', default=None, metavar='METAINFOFILE', help="add BTH for specified metainfo to client")
   op.add_option('--drop-torrent', dest='bth_drop', default=None, metavar='INFOHASH', help="drop BTH with specified info-hash from client")
   
   (options, args) = op.parse_args()

   socket_path = args[0]
   
   data_get = ((options.bth_start is options.bth_stop is options.mi_new is options.bth_drop is None) and (options.fbr is False))
   
   if (data_get):
      cc = tcbtccs.build_sock_connect(event_dispatcher, socket_path,
         family=socket.AF_UNIX, terminate_after_sync=False, td_print_delay=10)
   else:
      cc = btccs.build_sock_connect(event_dispatcher, socket_path,
         family=socket.AF_UNIX, terminate_after_sync=False)
   
   if (not (options.bth_start is None)):
      ih = binascii.a2b_hex(options.bth_start)
      cc.bth_start(options.client_idx, ih)
   if (not (options.bth_stop is None)):
      ih = binascii.a2b_hex(options.bth_stop)
      cc.bth_stop(options.client_idx, ih)
   if (not (options.bth_drop is None)):
      ih = binascii.a2b_hex(options.bth_drop)
      cc.bth_drop(options.client_idx, ih)
      
   if (not (options.fbr is False)):
      cc.btc_reannounce_force(options.client_idx)
   if (not (options.mi_new is None)):
      mi_str = open(options.mi_new,'rb').read()
      cc.bth_add_from_metainfo(options.client_idx, mi_str, True)

   
   if (data_get):
      cc.data_update()
   
   event_dispatcher.event_loop()

