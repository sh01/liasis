#!/usr/bin/env python3
#Copyright 2007,2008,2009 Sebastian Hagen
# This file is part of liasis.
#
# liasis is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# liasis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import time
import pickle
import logging
import optparse
import socket
import logging.handlers
import signal

from gonium.daemon import daemon_fork
from gonium.fdm import ED_get
from gonium.posix.signal import SignalCatcher, SA_RESTART
from gonium.service_aggregation import ServiceAggregate
from gonium.fdm.stream import AsyncLineStream

from liasis.benc_structures import BTMetaInfo
from liasis import bt_client
from liasis.bt_client import BTorrentHandler, EABTClient
from liasis import bandwidth_management
from liasis import bt_management
from liasis import bt_semipermanent_stats # need for btc unpickling
from liasis.bt_semipermanent_stats import BTStatsTracker
from liasis.config_str_parsing import socket_args_parse
from liasis.config_structures import BTCConfig, DaemonConfig, BTMConfig
from liasis.pickling import FileNamePickler


def configuration_parse(configfile):
   daemon_config = DaemonConfig()
   btm_config = BTMConfig()
   btc_config = BTCConfig()
   
   config_namespace = {}
   for name in ('daemon_config', 'btm_config', 'btc_config'):
      config_namespace[name] = locals()[name]
   
   exec(configfile.read(),config_namespace)
   return config_namespace


def main():
   if (os.getuid == 0):
      print('Liasis will not run as root; it just causes problems.')
      sys.exit()
      os.abort()
   
   
   logger = logging.getLogger()
   log = logger.log
   formatter = logging.Formatter('%(asctime)s %(name)s %(levelname)s %(message)s')
   
   op = optparse.OptionParser(usage='%prog [options] <config_file>')
   op.add_option('--forcenoresume', action="store_false", dest="resume", default=True, help='Do not unpickle BTClient instance saved earlier')
   op.add_option('-t', '--profile', action="store_true", dest='profile', default=False, help='use cProfile to profile liasis')
   op.add_option('--nodaemon', action='store_false', dest='daemon', default=True, help='do not daemonize')
   
   ogd = optparse.OptionGroup(op, 'Test / debugging options')
   ogd.add_option('--dst', action='store_true', dest='dst', default=False, help='Selftest-mode: Do full-app demon selftest and exit.')
   ogd.add_option('--ssm', action='store_true', dest='ssm', default=False, help='Slave selftest mode; not intended for use by humans.')
   op.add_option_group(ogd)
   
   (options, args) = op.parse_args()
   
   if (options.ssm):
      logger.setLevel(10)
      options.resume = False
      options.daemon = False
   
   if ((not options.daemon) or options.dst):
      handler_stderr = logging.StreamHandler()
      handler_stderr.setLevel(10)
      if (options.ssm):
         formatter = logging.Formatter('%(name)s %(levelname)s %(message)s')
      elif (options.dst):
         formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
      handler_stderr.setFormatter(formatter)
      logger.addHandler(handler_stderr)
   
   if (options.dst):
      logger.setLevel(10)
      log(50, 'Running self-tests.')
      from liasis.test.daemon import Tester
      Tester.run_standalone(sys.argv[0])
      return 0
   
   config_filename = args[0]
   config_file = open(config_filename,'rb')
   config_data = configuration_parse(config_file)
   config_file.close()
   
   daemon_config = config_data['daemon_config']
   btm_config = config_data['btm_config']
   btc_config = config_data['btc_config']
   
   log(50, 'Liasis daemon starting.')
   
   if (options.resume):
      btc = pickle.load(open(daemon_config.pickle_filename, 'r+b'))
   else:
      btc = EABTClient()
   
   pickler = FileNamePickler(daemon_config.pickle_filename)
   
   if (options.daemon):
      daemon_fork()
   
   sa = ServiceAggregate()
   sa.add_dtd()
   
   btc.connections_start(sa, btc_config)
   btc.pickling_shedule(pickler)
   
   if (options.ssm):
      def cb(*args, **kwargs):
         log(50, 'Test-session finished; shutting down.')
         sa.ed.shutdown()
      
      def cb2(*args, **kwargs):
         log(50, 'Lost stdin; shutting down.')
         sa.ed.shutdown()
      
      btc.em_bth_download_finish.new_listener(cb)
      
      stdin_s = AsyncLineStream(sa.ed, sys.stdin.detach())
      sys.stdin = None
      stdin_s.process_close = cb2
   
   sa.sc.sighandler_install(signal.SIGTERM, SA_RESTART)
   sa.sc.sighandler_install(signal.SIGINT, SA_RESTART)
   def handle_signals(si_l):
      for si in si_l:
         if ((si.signo == signal.SIGTERM) or (si.signo == signal.SIGINT)):
            sa.ed.shutdown()
            log(50, 'Shutting down on signal {0}.'.format(si.signo))
            break
   
   sa.sc.handle_signals.new_listener(handle_signals)
   
   # bt management stuff
   if (btm_config.control_socket_af == socket.AF_UNIX):
      # Clean up any old sockets
      try:
         os.unlink(btm_config.control_socket_address)
      except OSError:
         pass

   btm = bt_management.StreamSockBTManager(sa.ed,
      btm_config.peer_id_generator,
      address_family=btm_config.control_socket_af,
      address=btm_config.control_socket_address, bt_clients=(btc,))
   
   if (options.profile):
      import cProfile
      profile_dump_filename = ('liasis_{0}.prof'.format(time.time())).encode('ascii')
      log(20, 'Starting profile mode. Profile will be saved to {0!a}.'.format(profile_dump_filename))
      profiler = cProfile.Profile()
      profiler.runcall(sa.ed.event_loop)
      profiler.dump_stats(profile_dump_filename)
   else:
      sa.ed.event_loop()

if (__name__ == '__main__'):
   main()
